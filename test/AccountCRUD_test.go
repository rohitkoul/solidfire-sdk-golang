package test

import (
	log "github.com/sirupsen/logrus"
	"github.com/rohitkoul/solidfire-sdk-golang/sfapi"
	"github.com/rohitkoul/solidfire-sdk-golang/sftypes"
	"github.com/stretchr/testify/assert"
	"testing"
)

var (
	target          string
	accountID       int64
	accountUsername string
)

func init() {
	target = "10.117.61.42"
}

func Test_Account_New(t *testing.T) {
	c, err := sfapi.NewFromOpts(target, "admin", "admin", "", 0, 0)

	accountUsername = "golangtest" + RandString(10)

	result, err := c.AddAccount(sftypes.AddAccountRequest{Username: accountUsername, InitiatorSecret: sftypes.AutoGeneratedCHAPSecret()})
	assert.Nil(t, err)
	assert.NotNil(t, result)
	assert.NotNil(t, result.AccountID)
	assert.True(t, result.AccountID > 0)
	accountID = result.AccountID
	log.Debugf("New account created: %v", accountID)
}

func Test_Account_Get(t *testing.T) {

	c, err := sfapi.NewFromOpts(target, "admin", "admin", "", 0, 0)
	assert.Nil(t, err)

	result, err := c.GetAccountByID(sftypes.GetAccountByIDRequest{AccountID: accountID})
	assert.Nil(t, err)
	assert.True(t, result.Account.AccountID == accountID)
	assert.True(t, result.Account.Username == accountUsername)
}


func Test_Account_Modify(t *testing.T) {

	c, err := sfapi.NewFromOpts(target, "admin", "admin", "", 0, 0)
	assert.Nil(t, err)

	beforeModify, err := c.GetAccountByID(sftypes.GetAccountByIDRequest{AccountID: accountID})
	assert.Nil(t, err)

	result, err := c.ModifyAccount(sftypes.ModifyAccountRequest{AccountID: accountID, InitiatorSecret: sftypes.AutoGeneratedCHAPSecret()})
	assert.Nil(t, err)
	assert.NotNil(t, result)

	afterModify, err := c.GetAccountByID(sftypes.GetAccountByIDRequest{AccountID: accountID})
	assert.Nil(t, err)

	assert.True(t, beforeModify.Account.AccountID == afterModify.Account.AccountID)
	assert.True(t, beforeModify.Account.Username == afterModify.Account.Username)
	assert.False(t, beforeModify.Account.InitiatorSecret == afterModify.Account.InitiatorSecret)
}

func Test_Account_Remove(t *testing.T) {
	c, err := sfapi.NewFromOpts(target, "admin", "admin", "", 0, 0)
	assert.Nil(t, err)

	err = c.RemoveAccount(sftypes.RemoveAccountRequest{AccountID: accountID})
	assert.Nil(t, err)
}
